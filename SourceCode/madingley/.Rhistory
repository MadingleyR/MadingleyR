mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
# check veg mass
mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
# Run spin-up of 10 years
mdl_params[86,]$values = 0.25
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
# check veg mass
mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
# check veg mass
veg1.00 = mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
veg0.50 = mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
veg0.25 = mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
veg1.00/veg0.50
veg1.00/veg0.25
system("/home/selwyn/Documents/GitHub/MadingleyR/SourceCode/madingley/CompileLinux.sh")
setwd("~/Documents/GitHub/MadingleyR/SourceCode/madingley")
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
mdl_params[86,]$values = 1
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
# spatial test
mdl_params[86,]$values = 0.99
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
Rcpp::sourceCpp('src/EcologyStock.cpp')
system("./CompileLinux.sh")
.libPaths()
system("./LinuxInstall.sh")
# spatial test
mdl_params[86,]$values = 0.99
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
system("./CompileLinux.sh")
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
# spatial test
mdl_params[86,]$values = 0.99
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
plot_spatialwindow(spatial_window)
# Set model params
spatial_window = c(50, 52, -5, -1) # region of interest: Serengeti
plot_spatialwindow(spatial_window)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest: Serengeti
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
# spatial HANPP test
plot(sptl_inp$hanpp)
mdl_params[86,]$values = 0.99
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
# spatial HANPP test
plot(sptl_inp$hanpp)
mdl_params[86,]$values = 0.99
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdl_params[86,]$values = 1.00
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdl_params[86,]$values = 1.00
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
library(MadingleyR)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest: Serengeti
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
mdl_params = madingley_inputs('model parameters')
# set the maximum body masses of the functional groups manually
sptl_inp$Endo_O_max[ ] = 200000 # set max size omnivores = 200000 g (200 kg)
sptl_inp$Endo_C_max[ ] = 600000 # set max size carnivores = 600000 g (600 kg)
sptl_inp$Ecto_max[ ] = 150000 # set max size ectotherms = 150000 g (150 kg)
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
# Run spin-up of 10 years
mdl_params[86,]$values = 1.0
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
# Run spin-up of 10 years
mdl_params[86,]$values = 0.5
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
# Run spin-up of 10 years
mdl_params[86,]$values = 0.25
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
# check veg mass
veg1.00 = mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
veg0.50 = mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
veg0.25 = mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
veg1.00
veg0.50
veg0.25
system("./CompileLinux.sh")
system("./CompileLinux.sh")
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
get_default_model_parameters()
mdl_params = madingley_inputs('model parameters')
mdl_params
mdl_params = madingley_inputs('model parameters')
get_default_model_parameters()
mdl_params = get_default_model_parameters() # madingley_inputs('model parameters')
mdl_params
system("./CompileLinux.sh")
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
mdl_params = get_default_model_parameters() # madingley_inputs('model parameters')
mdl_params
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
mdl_params
mdl_params = get_default_model_parameters() # madingley_inputs('model parameters')
mdl_params
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
mdl_params
mdl_params = get_default_model_parameters() # madingley_inputs('model parameters')
mdl_params
mdl_params
mdl_params
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
mdl_params = get_default_model_parameters() # madingley_inputs('model parameters')
mdl_params
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
mdl_params = get_default_model_parameters() # madingley_inputs('model parameters')
mdl_params
View(mdl_params)
View(mdl_params)
mdl_params = get_default_model_parameters() # madingley_inputs('model parameters')
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdl_params[86,]$values = 1.00
mdl_params[86,]
mdl_params[87,]
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdl_params[86,]$values = 1.00
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
mdl_params[86,]$values = 0.00
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
mdl_params[86,]$values = 1.00
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
Rcpp::sourceCpp('src/EcologyStock.cpp')
system("/home/selwyn/Documents/GitHub/MadingleyR/SourceCode/madingley/CompileLinux.sh")
system("/home/selwyn/Documents/GitHub/MadingleyR/SourceCode/madingley/CompileLinux.sh")
setwd("~/Documents/GitHub/MadingleyR/SourceCode/madingley")
system("./CompileLinux.sh")
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdl_params[86,]$values = 1.00
mdl_params[86,]$values = 1.00
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
system("./LinuxInstall.sh")
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
get_default_model_parameters()
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
get_default_model_parameters()
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
get_default_model_parameters()
86-54
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
mdl_params = get_default_model_parameters() # madingley_inputs('model parameters')
mdl_params
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdl_params[86,]$values = 1.00
mdl_params
mdl_params[86,]$values = 1.00
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
mdl_params[86,]$values =0
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
mdl_params[86,]$values = 2
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
mdl_params
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdl_params[86,]$values = 2
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
sptl_inp$hanpp[] = 1
library(MadingleyR)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest: Serengeti
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
mdl_params = get_default_model_parameters() # madingley_inputs('model parameters')
# set the maximum body masses of the functional groups manually
sptl_inp$Endo_O_max[ ] = 200000 # set max size omnivores = 200000 g (200 kg)
sptl_inp$Endo_C_max[ ] = 600000 # set max size carnivores = 600000 g (600 kg)
sptl_inp$Ecto_max[ ] = 150000 # set max size ectotherms = 150000 g (150 kg)
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
# Run spin-up of 10 years
mdl_params[86,]$values = 1
sptl_inp$hanpp[] = 1
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
# Run spin-up of 10 years
mdl_params[86,]$values = 1
sptl_inp$hanpp[] = 0.5
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
# Run spin-up of 10 years
mdl_params[86,]$values = 1
sptl_inp$hanpp[] = 0.25
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
# check veg mass
veg1.00 = mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
veg0.50 = mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
veg0.25 = mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
# check veg mass
veg1.00 = mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
veg0.50 = mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
veg0.25 = mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
veg1.00
veg0.50
veg0.25
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
system("./CompileLinux.sh")
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
system("./LinuxInstall.sh")
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
Rcpp::sourceCpp('src/EcologyStock.cpp')
system("/home/selwyn/Documents/GitHub/MadingleyR/SourceCode/madingley/CompileLinux.sh")
system("/home/selwyn/Documents/GitHub/MadingleyR/SourceCode/madingley/CompileLinux.sh")
setwd("~/Documents/GitHub/MadingleyR/SourceCode/madingley")
system("./CompileLinux.sh")
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
# Run spin-up of 10 years
mdl_params[86,]$values = 10
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
sptl_inp$hanpp[] = 10
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
# Run spin-up of 10 years
mdl_params[86,]$values = 1
sptl_inp$hanpp[] = 10
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
# Run spin-up of 10 years
mdl_params[86,]$values = 1
sptl_inp$hanpp[] = 10
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
sptl_inp$hanpp[] = 10
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
system("./LinuxInstall.sh")
# Run spin-up of 10 years
mdl_params[86,]$values = 1
sptl_inp$hanpp[] = 10
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
apply_hanpp=FALSE
apply_hanpp==FALSE
apply_hanpp=FALSE)
apply_hanpp=FALSE
grid_size=0 # overwritten later using raster resolution
hanpp = 0
if(apply_hanpp==1) hanpp = 1
if(apply_hanpp==2) hanpp = 2
hanpp
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
system("./CompileLinux.sh")
spatial_inputs
spatial_inputsspatial_inputs = madingley_inputs(input_type = "spatial inputs")
spatial_inputs = madingley_inputs(input_type = "spatial inputs")
spatial_inputs$hanpp
max(spatial_inputs$hanpp)
raster::maxValue(spatial_inputs$hanpp)
source('~/Documents/GitHub/MadingleyR/Package/R/madingley_run.R')
# spatial HANPP test
plot(sptl_inp$hanpp)
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdata5 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 1, model_parameters = mdl_params, parallel = FALSE)
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package', build_vignettes = TRUE)
# Load the remotes package
library('remotes') # or use library('devtools')
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package', build_vignettes = TRUE)
library(MadingleyR)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest, somewhere in europe
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
# Run spin-up of 10 years
mdl_params[86,]$values = 1
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
library(MadingleyR)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest, somewhere in europe
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
sptl_inp$hanpp[]
madingley_run
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package', build_vignettes = TRUE, force = TRUE)
library(MadingleyR)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest, somewhere in europe
plot_spatialwindow(spatial_window)
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
remove.packages("MadingleyR", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package', build_vignettes = TRUE, force = TRUE)
library(MadingleyR)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest, somewhere in europe
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
# Run spin-up of 10 years
sptl_inp$hanpp[] = 1
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, )
# check veg mass
veg1.00 = mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
veg1.00
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
# Run spin-up of 10 years
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10)
# Run spin-up of 10 years
sptl_inp$hanpp[] = 0.5
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, model_parameters = mdl_params)
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = FALSE)
detach("package:MadingleyR", unload = TRUE)
remove.packages("MadingleyR", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package', force = TRUE)
library(MadingleyR)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest, somewhere in europe
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
# Run spin-up of 10 years
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10)
mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = FALSE)
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
sptl_inp$hanpp[]
# Run spin-up of 10 years
sptl_inp$hanpp[] = 0.5
sptl_inp$hanpp[]
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = FALSE)
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
sptl_inp$hanpp[]
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = 1)
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
# Run spin-up of 10 years
sptl_inp$hanpp[] = 0.25
# Run spin-up of 10 years
sptl_inp$hanpp[] = 0.25
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = 1)
mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
library(MadingleyR)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest, somewhere in europe
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
# Run spin-up of 10 years
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = 0)
mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
# Run spin-up of 10 years
sptl_inp$hanpp[] = 0.5
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = 1)
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
# Run spin-up of 10 years
sptl_inp$hanpp[] = 0.25
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = 1)
mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
source('~/Documents/GitHub/MadingleyR/Package/R/get_default_model_parameters.R')
get_default_model_parameters()
source('~/Documents/GitHub/MadingleyR/Tests/HANPP_tests.r')
madingley_version()
setwd("~/Documents/GitHub/MadingleyR/SourceCode/madingley")
system("./CompileLinux.sh")
system("./LinuxInstall.sh")
madingley_version()
sptl_inp$hanpp[]
# Load the remotes package
#library('remotes') # or use library('devtools')
# Install the MadingleyR package
#install_github('MadingleyR/MadingleyR', subdir='Package')
####
library(MadingleyR)
# Set model params
spatial_window = c(31, 35, -5, -1) # region of interest: Serengeti
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
# Run spin-up of 100 years (output results to C:/MadingleyOut)
mdata2 = madingley_run(madingley_data = mdata,
spatial_inputs = sptl_inp,
years = 100)
####
# Set scenario parameters
reps = 5 # set number of replicas per land-use intensity
fractional_veg_production = seq(1.0, 0.1, -0.1) # accessible biomass
fg = c('Herbivore', 'Carnivore', 'Omnivore') # vector for aggregating cohorts
stats = data.frame() # used to store individual model output statistics
# Loop over land-use intensities
for(j in 1:reps){
mdata3 = mdata2 # copy spin-up MadingleyR object to use in replica
for(i in 1:length(fractional_veg_production)) {
print(paste0("rep: ",j," fraction veg reduced: ",fractional_veg_production[i]))
sptl_inp$hanpp[] = fractional_veg_production[i] # lower veg production
mdata4 = madingley_run(
years = 50,
madingley_data = mdata3,
output_timestep = c(99,99,99,99),
spatial_inputs = sptl_inp,
silenced = TRUE,
apply_hanpp = 1)
# Calculate cohort biomass
cohorts = mdata4$cohorts
cohorts$Biomass = cohorts$CohortAbundance * cohorts$IndividualBodyMass
cohorts = cohorts[cohorts$FunctionalGroupIndex<3, ] # only keep endotherms
cohorts = aggregate(cohorts$Biomass, by = list(fg[cohorts$FunctionalGroupIndex + 1]), sum)
stats = rbind(stats, cohorts) # attach aggregated stats
}
}
####
# Calculate mean relative (to control) response per replica simulation
stats$veg_reduced = rep(sort(rep(1 - fractional_veg_production, 3)),reps)
m = aggregate(stats$x, by = list(stats$veg_reduced, stats$Group.1), FUN = median)
m$x_rel = NA;
for(i in fg) {
m$x_rel[m$Group.2 == i] = m$x[m$Group.2 == i]/m$x[m$Group.2 == i][1]
}
# Make final plots
plot(1 - unique(fractional_veg_production), m$x_rel[m$Group.2 == 'Herbivore'],
col= 'green', pch = 19, ylim = c(0, 1.5), xlim = c(0, 1),
xlab = 'Relative vegetation biomass inaccessible', ylab = 'Relative change in cohort biomass')
points(1 - unique(fractional_veg_production), m$x_rel[m$Group.2 =='Carnivore'], col= 'red', pch = 19)
points(1 - unique(fractional_veg_production), m$x_rel[m$Group.2 == 'Omnivore'], col = 'blue', pch = 19)
abline(1, -1, lty = 2)
legend(0.0, 0.3, fg, col=c('green', 'red', 'blue'), pch = 19, box.lwd = 0)
# Make final plots
plot(1 - unique(fractional_veg_production), m$x_rel[m$Group.2 == 'Herbivore'],
col= 'green', pch = 19, ylim = c(0, 1.5), xlim = c(0, 1),
xlab = 'Relative vegetation biomass inaccessible', ylab = 'Relative change in cohort biomass')
# Calculate mean relative (to control) response per replica simulation
stats$veg_reduced = rep(sort(rep(1 - fractional_veg_production, 3)),reps)
reps
fractional_veg_production
rep(sort(rep(1 - fractional_veg_production, 3)),reps)
stats
rep(sort(rep(1 - fractional_veg_production, 3)),reps)
length(rep(sort(rep(1 - fractional_veg_production, 3)),reps))
# Calculate mean relative (to control) response per replica simulation
stats$veg_reduced = rep(sort(rep(1 - fractional_veg_production, 3)),reps)[1:145]
m = aggregate(stats$x, by = list(stats$veg_reduced, stats$Group.1), FUN = median)
m$x_rel = NA;
for(i in fg) {
m$x_rel[m$Group.2 == i] = m$x[m$Group.2 == i]/m$x[m$Group.2 == i][1]
}
# Make final plots
plot(1 - unique(fractional_veg_production), m$x_rel[m$Group.2 == 'Herbivore'],
col= 'green', pch = 19, ylim = c(0, 1.5), xlim = c(0, 1),
xlab = 'Relative vegetation biomass inaccessible', ylab = 'Relative change in cohort biomass')
points(1 - unique(fractional_veg_production), m$x_rel[m$Group.2 =='Carnivore'], col= 'red', pch = 19)
points(1 - unique(fractional_veg_production), m$x_rel[m$Group.2 == 'Omnivore'], col = 'blue', pch = 19)
abline(1, -1, lty = 2)
legend(0.0, 0.3, fg, col=c('green', 'red', 'blue'), pch = 19, box.lwd = 0)
