library(MadingleyR)
?madingley_run
# Load package
library(MadingleyR)
# Spatial model domain = c(min_long, max_long, min_lat, max_lat)
spatial_window = c(31, 35, -5, -1)
# plot the spatial window to check selection
plot_spatialwindow(spatial_window)
# Prints possible input options to the R console
madingley_inputs( )
# Load inputs manually
sptl_inp = madingley_inputs('spatial inputs')
chrt_def = madingley_inputs('cohort definition')
stck_def = madingley_inputs('stock definition')
mdl_prms = madingley_inputs('model parameters') # useful later for running the model
str(sptl_inp,2)
# View the default cohort definitions
str(chrt_def,2)
# View the default cohort definitions
print(chrt_def)
# View the default stock definitions
print(stck_def)
def = structure(list(DEFINITION_Heterotroph.Autotroph = structure(c(1L, 1L, 1L), .Label = "Autotroph", class = "factor"),
DEFINITION_Nutrition.source = structure(c(1L, 1L, 1L), .Label = "Photosynthesis", class = "factor"),
DEFINITION_Diet = c(NA, NA, NA), DEFINITION_Realm = structure(c(1L, 2L, 2L), .Label = c("Marine", "Terrestrial"), class = "factor"),
DEFINITION_Mobility = structure(c(1L, 2L, 2L), .Label = c("Planktonic", "Sessile"), class = "factor"),
DEFINITION_Leaf.strategy = structure(c(3L, 1L, 2L), .Label = c("Deciduous", "Evergreen", "na"), class = "factor"),
PROPERTY_Herbivory.assimilation = c(NA, NA, NA),
PROPERTY_Carnivory.assimilation = c(NA, NA, NA),
PROPERTY_Proportion.herbivory = c(NA, NA, NA),
PROPERTY_Individual.mass = c(1e-04, 0, 0)),
class = "data.frame", row.names = c(NA, -3L))
def
def = def[2:3,]
def
source('~/Desktop/MadingleyR/MadingleyR/Package/R/get_default_stock_def.R')
# View the default stock definitions
print(stck_def)
# Load the remotes package
library('remotes') # or use library('devtools')
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package')
# Load package
library(MadingleyR)
# Spatial model domain = c(min_long, max_long, min_lat, max_lat)
spatial_window = c(31, 35, -5, -1)
# plot the spatial window to check selection
plot_spatialwindow(spatial_window)
# Prints possible input options to the R console
madingley_inputs( )
# Load MadingleyR default inputs
sptl_inp = madingley_inputs('spatial inputs')
chrt_def = madingley_inputs('cohort definition')
stck_def = madingley_inputs('stock definition')
mdl_prms = madingley_inputs('model parameters') # useful later for running the model
save(sptl_inp,"SpatialInputs.rds")
save(sptl_inp,"SpatialInputs.RData")
save(sptl_inp,file = "SpatialInputs.RData")
getwd()
get_lib_path()
spatial_path=paste0(get_lib_path(),"/SpatialInputs.RData")
spatial_path
saveRDS(sptl_inp,"/home/selwyn/R/x86_64-pc-linux-gnu-library/3.6/MadingleyR/SpatialInputs.rds")
saveRDS(sptl_inp,"SpatialInputs.rds")
getwd()
# standard loading of spatial files using .rds (quicker)
spatial_path=paste0(get_lib_path(),"/SpatialInputs.rds")
spatial_path
# standard loading of spatial files using .rds (quicker)
spatial_path=paste0(get_lib_path(),"/SpatialInputs.rds")
readRDS(spatial_path)
source('~/Desktop/MadingleyR/MadingleyR/Package/R/madingley_inputs.R')
# Load the remotes package
library('remotes') # or use library('devtools')
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package')
# Load the remotes package
library('remotes') # or use library('devtools')
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package')
# Load package
library(MadingleyR)
# Spatial model domain = c(min_long, max_long, min_lat, max_lat)
spatial_window = c(31, 35, -5, -1)
# plot the spatial window to check selection
plot_spatialwindow(spatial_window)
# Prints possible input options to the R console
madingley_inputs( )
# Load MadingleyR default inputs
sptl_inp = madingley_inputs('spatial inputs')
input_options = c("spatial inputs","cohort definition","stock definition","model parameters","print options")
paste0(' "',input_options[1:3],'", ')
cat(paste0(' "',input_options[1:3],'", '))
source('~/Desktop/MadingleyR/MadingleyR/Package/R/madingley_inputs.R')
madingley_inputs()
source('~/Desktop/MadingleyR/MadingleyR/Package/R/madingley_inputs.R')
madingley_inputs()
source('~/Desktop/MadingleyR/MadingleyR/Package/R/madingley_inputs.R')
source('~/Desktop/MadingleyR/MadingleyR/Package/R/madingley_inputs.R')
source('~/Desktop/MadingleyR/MadingleyR/Package/R/madingley_inputs.R')
madingley_inputs()
# Load the remotes package
library('remotes') # or use library('devtools')
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package')
# Load package
library(MadingleyR)
# Spatial model domain = c(min_long, max_long, min_lat, max_lat)
spatial_window = c(31, 35, -5, -1)
# plot the spatial window to check selection
plot_spatialwindow(spatial_window)
# Prints possible input options to the R console
madingley_inputs( )
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package', force = TRUE)
# Load package
library(MadingleyR)
# Spatial model domain = c(min_long, max_long, min_lat, max_lat)
spatial_window = c(31, 35, -5, -1)
# plot the spatial window to check selection
plot_spatialwindow(spatial_window)
# Prints possible input options to the R console
madingley_inputs( )
madingley_inputs
# Load the remotes package
library('remotes') # or use library('devtools')
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package')
# Load package
library(MadingleyR)
detach('package:MadingleyR', unload=TRUE)
remove.packages('MadingleyR')
# Load the remotes package
library('remotes') # or use library('devtools')
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package')
# Load package
library(MadingleyR)
# Spatial model domain = c(min_long, max_long, min_lat, max_lat)
spatial_window = c(31, 35, -5, -1)
# plot the spatial window to check selection
plot_spatialwindow(spatial_window)
# Prints possible input options to the R console
madingley_inputs( )
# Load MadingleyR default inputs
sptl_inp = madingley_inputs('spatial inputs')
chrt_def = madingley_inputs('cohort definition')
stck_def = madingley_inputs('stock definition')
mdl_prms = madingley_inputs('model parameters') # useful later for running the model
# View the contents of the spatial inputs
str(sptl_inp,2)
# View the default cohort definitions
print(chrt_def)
# View the default stock definitions
print(stck_def)
# Initialise model the model using the pre-loaded inputs
mdata = madingley_init(spatial_window = spatial_window,
cohort_def = chrt_def,
stock_def = stck_def,
spatial_inputs = sptl_inp)
# Run the Madingley model for 10 years
mdata2 = madingley_run(madingley_data = mdata,
years = 10,
cohort_def = chrt_def,
stock_def = stck_def,
spatial_inputs = sptl_inp,
model_parameters = mdl_prms)
# Plot MadingleyR time lines
plot_timelines(mdata2)
# Plot MadingleyR body mass density
plot_densities(mdata2)
# Plot MadingleyR trophic pyramid
plot_trophicpyramid(mdata2)
# Create MadingleyR log10-binned food-web plot
plot_foodweb(mdata2, max_flows = 5)
# Plot MadingleyR spatial biomass
plot_spatialbiomass(mdata2, functional_filter = TRUE)
namaes(sptl_inp)
names(sptl_inp)
class(sptl_inp)
class(sptl_inp[[1:10]])
class(sptl_inp[[1:2]])
class(sptl_inp[[]])
class(sptl_inp[[1]])
lapply(sptl_inp,class)
str(sptl_inp,2)
str(sptl_inp,2)
print(mdl_prms)
print(mdl_prms)
print(mdl_prms[,2:3])
print.data.frame(mdl_prms)
# Print the default model parameters, part 1
kable(mdl_prms[,2:3])
# Print the default model parameters, part 1
print(mdl_prms[,2:3])
print(mdl_prms[,2:3])
mdl_prms
print(mdl_prms[,2:3], pad=0)
kable(mdl_prms[,2:3], pad=0)
knitre::kable(mdl_prms[,2:3], pad=0)
knitr::kable(mdl_prms[,2:3], pad=0)
?kable
kable(mdl_prms[,2:3], pad=0, digits=2)
knitr::kable(mdl_prms[,2:3], pad=0, digits=2)
knitr::kable(mdl_prms[,2:3], pad=0, digits=1)
knitr::kable(mdl_prms[,2:3], pad=0, digits=0)
knitr::kable(mdl_prms[,2:3], pad=0, digits=1)
print(mdl_prms[,2:3])
library(gridExtra)
# Print the default model parameters
grid.table(mdl_prms[,2:3])
grid.table(mdl_prms[,2:3])
grid.table(mdl_prms[,2:3])
mdl_prms[,2]
round(mdl_prms[,2],2)
decimals(mdl_prms[,2],2)
print(mdl_prms[,2:3])
str(mdata,2)
str(mdata,1)
str(mdata,1)
mdl_prms[,2:3]
df = structure(list(DEFINITION_Heterotroph.Autotroph = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = "Heterotroph", class = "factor"),
DEFINITION_Nutrition.source = structure(c(3L, 1L, 1L, 1L, 2L, 2L, 3L, 3L, 2L, 2L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 3L), .Label = c("Carnivore", "Herbivore", "Omnivore"), class = "factor"),
DEFINITION_Diet = structure(c(2L, 1L, 1L, 1L, 3L, 3L, 1L, 1L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c("All", "AllSpecial", "Planktivore"), class = "factor"),
DEFINITION_Realm = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c("Marine", "Terrestrial"), class = "factor"),
DEFINITION_Mobility = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c("Mobile", "Planktonic"), class = "factor"),
DEFINITION_Reproductive.strategy = structure(c(1L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L), .Label = c("iteroparity", "semelparity"), class = "factor"),
DEFINITION_Endo.Ectotherm = structure(c(2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c("Ectotherm", "Endotherm"), class = "factor"),
PROPERTY_Herbivory.assimilation = c(0, 0, 0, 0, 0.7, 0.7, 0.6, 0.6, 0.7, 0.7, 0.5, 0, 0.38, 0.5, 0, 0.36, 0.5, 0, 0.36),
PROPERTY_Carnivory.assimilation = c(0.8, 0.8, 0.8, 0.8, 0, 0, 0.64, 0.64, 0, 0, 0, 0.8, 0.64, 0, 0.8, 0.64, 0, 0.8, 0.64),
PROPERTY_Proportion.suitable.time.active = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
PROPERTY_Minimum.mass = c(10000, 100, 1e-04, 1e-04, 1e-04, 1e-04, 1e-05, 1e-05, 1e-05, 1e-05, 1, 5, 5, 0.04, 0.08, 0.04, 1, 1.5, 1.5),
PROPERTY_Maximum.mass = c(1.5e+08, 5e+07, 2e+06, 2e+06, 10000, 10000, 1e+05, 1e+05, 0.1, 0.1, 7e+06, 8e+05, 150000, 500, 2000, 2000, 100000, 100000, 55000),
PROPERTY_Initial.number.of.GridCellCohorts = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 50, 50L, 50L, 50L, 50L, 50L, 50L, 50L, 50L),
NOTES_group.description = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = "None", class = "factor")),
class = "data.frame", row.names = c(NA, -19L))
df = df[df$DEFINITION_Realm=="Terrestrial",]
df
rownames(df)
rownames(df) = NULL
df
detach('package:MadingleyR', unload=TRUE)
remove.packages('MadingleyR')
getwd()
library(gridExtra)
pdf(mdl_prms, height=11, width=8.5)
grid.table(mtcars)
dev.off()
library(gridExtra)
pdf("mdl_prms.pdf", height=15, width=8.5)
grid.table(mdl_prms)
dev.off()
library(gridExtra)
pdf("mdl_prms.pdf", height=30, width=20)
grid.table(mdl_prms)
dev.off()
library(gridExtra)
pdf("mdl_prms.pdf", height=25, width=15)
grid.table(mdl_prms)
dev.off()
library(MadingleyR)
# Load the remotes package
library('remotes') # or use library('devtools')
install_github('MadingleyR/MadingleyR', subdir='Package')
library(MadingleyR)
library(gridExtra)
grid.table(madingley_inputs('model parameters'))
library(MadingleyR)
library(gridExtra)
grid.table(madingley_inputs('model parameters'))
source('~/Desktop/MadingleyR/MadingleyR/Vignette/mdl_prms_table.r')
