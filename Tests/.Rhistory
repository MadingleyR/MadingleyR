# Install the MadingleyR package
#install_github('MadingleyR/MadingleyR', subdir='Package', force = TRUE)
library(MadingleyR)
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest, somewhere in europe
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
detach("package:MadingleyR", unload = TRUE)
remove.packages("MadingleyR", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
remove.packages("MadingleyR")
# Load the remotes package
library('remotes') # or use library('devtools')
# Install the MadingleyR package
install_github('MadingleyR/MadingleyR', subdir='Package', force = TRUE)
#detach("package:MadingleyR", unload = TRUE) # unload if loaded, don't mind the error
#remove.packages("MadingleyR")  # uninstall package
#library('remotes') # or use library('devtools') # load the remotes package
install_github('MadingleyR/MadingleyR', subdir='Package', force = TRUE, build_vignettes = TRUE) # install the MadingleyR package
#detach("package:MadingleyR", unload = TRUE) # unload if loaded, don't mind the error
#remove.packages("MadingleyR")  # uninstall package
#library('remotes') # or use library('devtools') # load the remotes package
#install_github('MadingleyR/MadingleyR', subdir='Package', force = TRUE, build_vignettes = TRUE) # install the MadingleyR package
library(MadingleyR)
madingley_version( ) # check pkg = 1.0.2, cpp src = 2.02
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest, somewhere in europe
plot_spatialwindow(spatial_window)
sptl_inp = madingley_inputs('spatial inputs') # load default inputs
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sptl_inp)
# Run spin-up of 10 years, without veg removal
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = 0)
mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
# Run spin-up of 10 years, reduce veg by 50%
sptl_inp$hanpp[] = 0.5 # this sets all the values of the hanpp raster to 0.5, thus applying the reduction on all cells
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = 1)
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
# Run spin-up of 10 years, reduce veg by 75%
sptl_inp$hanpp[] = 0.25 # this sets all the values of the hanpp raster to 0.25, thus reducing the veg production by 0.75
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sptl_inp, years = 10, apply_hanpp = 1) # apply_hanpp = 1, fractional raster applied
mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
sp_in = madingley_inputs('spatial inputs') # load default inputs
source('~/Documents/GitHub/MadingleyR/Tests/HANPP_tests.r')
#detach("package:MadingleyR", unload = TRUE) # unload if loaded, don't mind the error
#remove.packages("MadingleyR")  # uninstall package
#library('remotes') # or use library('devtools') # load the remotes package
#install_github('MadingleyR/MadingleyR', subdir='Package', force = TRUE, build_vignettes = TRUE) # install the MadingleyR package
library(MadingleyR)
madingley_version( ) # check pkg = 1.0.2, C++ src = 2.02
# Set model params
spatial_window = c(35, 37, 50, 52) # region of interest
plot_spatialwindow(spatial_window)
sp_in = madingley_inputs('spatial inputs') # load default inputs
# Initialise model
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sp_in)
# Run model of 10 years, without veg reduction
mdata2 = madingley_run(madingley_data = mdata, spatial_inputs = sp_in, years = 15, apply_hanpp = 0) # apply_hanpp = 0, hanpp raster not used
# Run model of 10 years, reduce veg by 50%
sp_in$hanpp[] = 0.5 # this sets all the values of the hanpp raster to 0.5, thus applying the reduction on all cells
mdata3 = madingley_run(madingley_data = mdata, spatial_inputs = sp_in, years = 15, apply_hanpp = 1) # apply_hanpp = 1, fractional raster applied
# Run model of 10 years, reduce veg by 75%
sp_in$hanpp[] = 0.25 # this sets all the values of the hanpp raster to 0.25, thus reducing the veg production by 0.75
mdata4 = madingley_run(madingley_data = mdata, spatial_inputs = sp_in, years = 15, apply_hanpp = 1) # apply_hanpp = 1, fractional raster applied
# Check the veg reduction, sometimes more years are needed to arrived at the right values
mean(mdata2$time_line_stocks$TotalStockBiomass[mdata2$time_line_stocks$Year==10])
mean(mdata3$time_line_stocks$TotalStockBiomass[mdata3$time_line_stocks$Year==10])
mean(mdata4$time_line_stocks$TotalStockBiomass[mdata4$time_line_stocks$Year==10])
get_lib_path()
#detach("package:MadingleyR", unload = TRUE) # unload if loaded, don't mind the error
#remove.packages("MadingleyR")  # uninstall package
#library('remotes') # or use library('devtools') # load the remotes package
#install_github('MadingleyR/MadingleyR', subdir='Package', force = TRUE, build_vignettes = TRUE) # install the MadingleyR package
library(MadingleyR)
madingley_version( ) # check pkg = 1.0.2, C++ src = 2.02
# set spatial window and load spatial rasters
spatial_window = c(-11, 35, 35, 60)
plot_spatialwindow(spatial_window)
sp_in = madingley_inputs('spatial inputs') # load default inputs
plot(sp_in$hanpp)
?madingley_run
# plot default hanpp layer
plot(sp_in$hanpp) # by default this layer is in gC/m^2/year
# initialise model, hanpp layer not yet relevant here
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sp_in)
# initialise model, hanpp layer not yet relevant here
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sp_in, max_cohort = 40)
# run spin-up (without hanpp)
mdata = madingley_run(years = 10, spatial_window = spatial_window, spatial_inputs = sp_in, max_cohort = 40)
# run spin-up (without hanpp)
mdata = madingley_run(years = 10, spatial_inputs = sp_in, max_cohort = 40)
# run spin-up (without hanpp)
mdata2 = madingley_run(madingley_data = mdata, years = 10, spatial_inputs = sp_in, max_cohort = 40)
# source temporary function for making raster data for autotrophs
source("https://raw.githubusercontent.com/SHoeks/RandomMadingleyRFunctions/master/make_spatial_biomass_raster_autotrophs.R")
autotr_biomass = make_spatial_biomass_raster_autotrophs(m_data2)
autotr_biomass = make_spatial_biomass_raster_autotrophs(mdata2)
plot(log10(autotr_biomass), zlim=c(12,14)) # make plot from rasters
autotr_biomass = make_spatial_biomass_raster_autotrophs(mdata3)
plot(log10(autotr_biomass), zlim=c(12,14)) # make plot from rasters
autotr_biomass = make_spatial_biomass_raster_autotrophs(mdata2)
plot(log10(autotr_biomass), zlim=c(12,14)) # make plot from rasters
# run continuation (with hanpp) using mdata2
mdata3 = madingley_run(madingley_data = mdata2, years = 10, spatial_inputs = sp_in, max_cohort = 40, apply_hanpp = 2)
autotr_biomass = make_spatial_biomass_raster_autotrophs(mdata3)
plot(log10(autotr_biomass), zlim=c(12,14)) # make plot from rasters
# run continuation (starting from mdata2) using a fractional raster, thus setting apply_hanpp = 1
sp_in$hanpp[]
# run continuation (starting from mdata2) using a fractional raster, thus setting apply_hanpp = 1
max(sp_in$hanpp[])
# run continuation (starting from mdata2) using a fractional raster, thus setting apply_hanpp = 1
max(sp_in$hanpp[], na.rm = TRUE)
min(sp_in$hanpp[], na.rm = TRUE)
sp_in$hanpp[] = sp_in$hanpp[] + min(sp_in$hanpp[], na.rm = TRUE)
plot(sp_in$hanpp)
sp_in = madingley_inputs('spatial inputs') # load default inputs
sp_in$hanpp[] = sp_in$hanpp[] + abs(min(sp_in$hanpp[], na.rm = TRUE))
plot(sp_in$hanpp)
plot(sp_in$hanpp[] / max(sp_in$hanpp[], na.rm = TRUE))
plot(sp_in$hanpp / max(sp_in$hanpp[], na.rm = TRUE))
# plot default hanpp layer
plot(sp_in$hanpp) # by default this layer is in gC/m^2/year
sp_in = madingley_inputs('spatial inputs') # load default inputs
# run continuation (starting from mdata2) using a fractional raster (hypothetical example, not correct conversion), thus setting apply_hanpp = 1
sp_in$hanpp[] = ( sp_in$hanpp[] + abs(min(sp_in$hanpp[], na.rm = TRUE)) ) / max(sp_in$hanpp[], na.rm = TRUE) # this is only for the example, not correct
plot(sp_in$hanpp)
sp_in = madingley_inputs('spatial inputs') # load default inputs
# run continuation (starting from mdata2) using a fractional raster (hypothetical example, not correct conversion), thus setting apply_hanpp = 1
sp_in$hanpp[] = sp_in$hanpp[] + abs(min(sp_in$hanpp[], na.rm = TRUE)) # this is only for the example, not correct
sp_in$hanpp[] = sp_in$hanpp[] / max(sp_in$hanpp[], na.rm = TRUE)
plot(sp_in$hanpp)
sp_in$hanpp[] = 1 / sp_in$hanpp[]
plot(sp_in$hanpp)
sp_in = madingley_inputs('spatial inputs') # load default inputs
# run continuation (starting from mdata2) using a fractional raster (hypothetical example, not correct conversion), thus setting apply_hanpp = 1
sp_in$hanpp[] = sp_in$hanpp[] + abs(min(sp_in$hanpp[], na.rm = TRUE)) # this is only for the example, not correct
sp_in$hanpp[] = sp_in$hanpp[] / max(sp_in$hanpp[], na.rm = TRUE)
sp_in$hanpp[] = 1-sp_in$hanpp[]
plot(sp_in$hanpp)
mdata4 = madingley_run(madingley_data = mdata2, years = 10, spatial_inputs = sp_in, max_cohort = 40, apply_hanpp = 1) #!! apply_hanpp = 1
autotr_biomass = make_spatial_biomass_raster_autotrophs(mdata4)
plot(log10(autotr_biomass), zlim=c(12,14)) # make plot from rasters
autotr_biomass = make_spatial_biomass_raster_autotrophs(mdata2)
plot(log10(autotr_biomass), zlim=c(12,14)) # make plot from rasters
# still a global reduction (single fractional value for all cells) can be set using
sp_in$hanpp[] = 0.5 # all values in the raster are 0.5 now
plot(sp_in$hanpp)
# still a global value (single fractional value for all cells) can be set using
sp_in$hanpp[] = 0.4
plot(sp_in$hanpp) # all values in the raster are 0.4 now
# run mandingley continuation with 0.6 reduction (0.4 veg remaining) to all cells, set apply_hanpp = 1
mdata5 = madingley_run(madingley_data = mdata2, years = 10, spatial_inputs = sp_in, max_cohort = 40, apply_hanpp = 1)
autotr_biomass5 = make_spatial_biomass_raster_autotrophs(mdata5)
plot(log10(autotr_biomass5), zlim=c(12,14)) # make plot from rasters
autotr_biomass5/ autotr_biomass2
autotr_biomass2 = make_spatial_biomass_raster_autotrophs(mdata2)
plot(log10(autotr_biomass2), zlim=c(12,14)) # make plot from rasters
autotr_biomass5/ autotr_biomass2
plot(autotr_biomass5/ autotr_biomass2)
plot(mean(autotr_biomass5/ autotr_biomass2))
# plot default hanpp layer
plot(sp_in$hanpp, main="HANPP in gC/m^2/year") # by default this layer is in gC/m^2/year
sp_in = madingley_inputs('spatial inputs') # load default inputs, including hanpp layer
# plot default hanpp layer
plot(sp_in$hanpp, main="HANPP in gC/m^2/year") # by default this layer is in gC/m^2/year
# initialise model, hanpp layer not yet relevant here
mdata = madingley_init(spatial_window = spatial_window, spatial_inputs = sp_in, max_cohort = 40)
